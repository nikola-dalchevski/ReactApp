install react npm install -g create-react-app  


create react app two ways:
-create-react-app
-manulay install 
 * npm init -y
 * npm install react react-dom --save

webpack is used for module packaging
npm install webpack webpack-dev-server webpack-cli --save

bable is compiler and transpiler used to convert one source cod to others
it compiles jsx to js
babel-loader for jsx
babel-preset-react makes browser update automatically
babel-perset-env for es6
npm install bable-core bable-loader bable-preset-env bable-perset-react bable-webpack-plugin --save-dev


creating files
-index.html
-App.js
-main.js
-webpack.config.js
-.babelrc


best is to use create-react-app name



React Features

-JSX
-Components
-One-way Data Binding
-Virtual DOM
-Simplicity
-Performance



1JSX

<div>Hello</div>
Reac.createElement("div", null, 'Hello') 
(nameofElement, Attributes, Content)

-to use more than one element in jsx you must wrap them in on element div

-jsx attributes as regular HTML use camelCase
-values on attributes can be in two ways:
 * as string Literals
 * as Expresion {}
-JSX comments {/**/}


-JSX style
Inline is recomendet
render(){
 var myStyle = {
fontSize: 80
}

return <div style={myStyle}>something<div>


-jsx is javascript so you can put conditional if statement



2 React Components

-Functional and class based components
-functional components have only render method and they dont have there state
-function components are known as stateless components

-class components must be extendet from react.Component and must have render method
-class component is also known as stateful component because thay can hold local state

(components will rerender only if state or props are changed)


3 React State
-State must be kept as simple as possible. it can be set using the setState() method
-to set up initial state before any interaction occurs we use getInitialState() method

- to define state inside constructor set up this.state = {1: something};
-outside the constructor state = {1: something};

4 Props
-stands up for Properties
-they are read-only component
-its a store object that includes all atributes that are passed from parent component
-props are imutable inside the component we can just read them
-set up default props

App.defaultProps = {
name: "nikola"
}

export default App;

-state and props can be combinated toogether in component and you can pass state as props

5 React props validation
import propTypes from 'prop-types';

-react components use special property PropType to valiedate props

class App extends React.Component {
render () {
<p>{this.props.propArray}</p>
}
}

App.propTypes = {
  propArray : PropTypes.array.isRequired,
  propBool : PropTypes.bool.isRequrired,
  propFunc : PropTypes.func
}

- sets up the type of evry prop in the component


custome validation 

props: It should be the first argument in the component.
propName: It is the propName that is going to validate.
componentName: It is the componentName that are going to validated again.

var Component = React.createClass({  
App.propTypes = {  
   customProp: function(props, propName, componentName) {  
        if (!item.isValid(props[propName])) {  
          return new Error('Validation failed!');  
        }  
      }  
   }  
})  


6 State vs Props

- props are read-only | state changes can be asynchronous
- props are immutable | state is mutable
- props allow you to pass data from one component to another | state hold information about the components
- props can be accessed by the child component | statet cannot be accessed from child component
- props are used from communicate between components | state is used from rendering dynamic changes with the component
- stateless components can have porps | stateless componens cannot have state
- props make components reusable | state cannot make components reusable
- props are external and controlled by whatever rednders the component | state is intrnal and controlled by the react compnonent itself
 

changing props and state

-can get inital vale from parent component yes yes;
-can be changed by parent component yes no;
-can set default values inside component yes yes;
-can change inside component no yes;
-can set initial value for child Component yes yes;
-can change in shild components yes no;

*if changing state that depends on previus state use setState() function

(prevState) => {
   return { statePropName: !prevState.statePropName}
}

7 React constructor

- constuctor is method used to initalize an object state in a class
-if use constructor you must call consructor(props) super(props)

- two purposes for using constructor
 * it used for initializing the local state of the component
 * if used for binding event handler methods that occur in your component

-if you use arrow functions you dont need to bind this in the constructor to the events

constuctor(props){
  this.handleFunction = this.handleFunction.bind(this)
}

bind can be done in jsx expresion

9 React Component Life-Cycle

A| Initial Phase

- getDefaultProps()
 it is used to specify the default value of this.props 
and its invoked before the creation of the component

-getInitialState()
it is used to specify the default value of this.state


**those methods are not used and can only bi used with React.createClass
B| Mount Phase

-componentWillMount()
is invoked before a component gets rendered into the DOM

-render()
needs to be pure function not setup state here
if you dont want to render anything can return null or false

-componentDidMount()
is invoked agfter component gets rendered into the DOM
in this you can do any DOM queries
its a good place to make api request

** componentWillMount is out of usage


C| Updating Phase

-componentWillReciveProps()
is invoked when component recives new pops
you should compere this.porps and next.Props and then update state

-shouldComponentUpdate()
this method takes two arguments nextProps and nextState
if this method return true component will update else return false

-componentWillUpdate()
its invoke just before the comopnent updates
here you can change this.setState()
it will not be called if shouldComponentUpdate return false

-render()
needs to be pure function not setup state here

-componentDidUpdate()
it is invoked imediatly after component renders

** componentwillReciveProps and componentWillUpdate are out of usage

D| Unmounting Phase

-componentWillUnmount()
is invoked immediately before a component is destroyed and unmounted
its used for necessery cleanup

Practical usage
*** first rendering a component are called:
-constructor
-render
-didComponentUpdate
*** onUpdate are called:
-shouldComponentUpdate
-render
-didcomponentUpdate
*** on destroing component
-component will unmount

10 React Forms

two types of form input
- uncontrolled 
the som handles the from data
you need to use ref to get form values
- controlled
input element is controled by the component rather the DOM
the value is kept in the state and updated using setState()
 constructor(props){
   super(props)
   this.state = {value: ""}
   this.handleChange = this.handleChange.bind(this)
}

hadleChange(event){
   this.setState(value: event.target.value)
}

<input onChange={this.handleChange}/>

to hadling multile inputs is best to add name attribute


 handleInputChange(event) {  
       const target = event.target;  
       const value = target.type === 'checkbox' ? target.checked : target.value;  
       const name = target.name;  
       this.setState({  
           [name]: value  
       });  
  }  



-Form validation in react can be done manualy and with third part packages
11 React Events

-React event handeling system is known as Synthetic Events
-React evetns are named camel case instead of lowercase dom events
-whit jsx function is passed as event handler instead of a string
- in react cant return false to prevent default behavior, must be called preventDefault() method



12 Conditional Rendering

-if operator
-ternary operator
-Logical && operator
- switch

prevent component from rendering 
-can use conditional rendering so component will not been shown (return null)


13 React Lists

-the map method is used from traversing the list
const items = listItems.map((item) => {
  return  <li>{item}</item>
})

return <ul>{items}</ul>

-list need to have key for evry item best is to add them in a array and to be unique identifier

<li key={item.id}>{item}</li>

-keys must be unique between siblians but not need to be unique globally



14 React Refs

-whan to use refs
 * when we need DOM measurments such as managing focus, text selection or media playback
 * in triggering imperative animations
 * when integrating wit  third-party DOM libraries
 * can use in callbacks

-when not to use refs
 * avoid for anything that can be done declaratively
 * avoid overuse of the refs

-create ref
in constructor
this.nameRef = React.createRef();

in render method
<div ref={this.callRef>/>


-how to access ref
const node = this.callRef.current

-can add referene to component
<CustomeInput ref={this.callRef}/>

-callback ref
<input type="text" ref={element => this.callRefInput = element}>
-can be accessed anywhere like this.callRefInput.value

-can forword react ref with React.forwardRef((props, rf))   (read about this)


15 react Fragments

- because render method most return one node and to dont wrap elements in div
-you can use <React.Fragment> (ex: if div hides style)

it makes execution of code faster than using div and takes ledd memory
- short syntax is <></>
diference is  tha sort synrax dont accept key as attruibute if we render list of items


16 React Router

-three different packages for routing
w*react-router - provides the core routing components and functions
m* react-router-native - its used fro mobile applications
w* react-router-dom - its used from web aplications to render on to a dom

-two types of router componentns
*<BrowserRouter> handiling the dynamic URL
*<HashRouter> it is used from handiling the static request

-import BrowserRoutere in app.js or index.js and wrap evrything with that need 
to use router with <BrowserRouter>

Route has some attributes
-path="/" if two Route has same path the the two will be rendered on the screen
router first see if the url starts same as path if its true it will render 
to prevent this use exact
-exact (bool) will be rendered only the path is exact
-component={App} what component to render
-render={() => (JSX)} put jsx to render

*if you use a tag evry time you change link application will rerender
to remove this behavior change a to <Link> who hase to attribute
to="/new-post" or to={{pathname:"/", search: '?something=true'}}


* react router send to components some default proprs
if you what to resend them in onother nested component there are two ways
as attribute {...this.props}
as attribute match={this.props.match}
in child component import withRouter from react-router-dom
its highorder component wrap export with it

-can be send parametar throu the Router with path="/:id"
-the parameter is recived in component with this.props.match.params.id

-you can send parameter programatically with handler method this.porps.history.push({pathname: '/' + id})

-you can use NavLink insted of Link will give you chance to style the active link
this will add to the link that is active a class with name active 
you can override the name of the active class with the attribute activeClassName="myActive"
also you can use activeStyle={{color:orange}} attrubute to style the active link


-Switch can be imported from rect-router-dom and can wrap Routes whit that will be 
called the first Route thet match the path

-Rdirect can be imported from react-router-dom and can have two attributes
from and to so from one url will redirect to another
-redirect can be used for conditional redirection on components only to attribute
-also can redirect using this.props.history.push("/posts/")

-Gard some routes
set state auth : false 
and conditionaly render <Router> if is not there set up default router

Route without found will catch evry url that is not specified in the Switch

Code spliting or Lazy loading will download olny the content thet is requested by the 
page url


import {Route, Link, BrowserRouter} from 'react-router-dom'
import App from 'components';
<BrowserRouter>
<div>
<Route path="/" exact  component={App}/>
</div>
<BrowserRouter>

<ul>
<Link to="/" >
</ul>

-to add style to active link use <NavLink>

add property activeStyle={
 { color: green}
}


-<Redirect> its used to redirect to another route but maintain the old urls.


17 React CSS
-inline styling (camelCase (backgroundColor) object)
<p style={{color:'Green'}}>

inside render method can create myStyleObject with styles


-css stylesheeet
make file with .css extension
import './App.css'


-css module
make file with .module.css
import styles from 'app.module.css';
access styles with style.calssName
<p classNaame={style.calssName}>

-Styled Components
its a library from React
npm install styled-components --save


18 React animations
-are maked by using React Transition Group
React Transition group has mainly two Apis
* reactTransitionGroup - for low-level 
* reactCssTransitionGroup - high-level

npm install react-transition-groupe --save

-react transition groups components:
*Transition - its mainly used from mountin and unmounting component
can access this component in four states: entering, entered, exiting, exited

-CssTransitions -for transition and animations three states appear, enter, exit

-Transition Group - for a list (read about this)


19 React Bootstrap

-using bootstrap cdn
-bootstrap as dependency
-react bootstrap package (react-bootstrap, reactstrap)


20 React Table
(npm install react-table) (read more about this)


21 React Higher-Order Comopnents HOC
22 React Code Spliting
23 React Context
24 React Hooks
25 React Flux Concept
26 React Flux vs MCV
27 Flux vs MVC
28 React Redux
-Store is a p;ace where the entire state of your application lists.
-action is set or dispatched from the view 
-reducer read payload from the action and update the store
npm install redux, react-redux


export const item => item => ({
   type: 'GET_ALL',
   payload: {
    name: 'nikola'
}
})


29 React Portal
-for Modals
-Tooltips
-floating menus
-widgets


30 Axios

npm install axios --save

axios.get/post/put/delete

-axios uses promises
-axios automaticly change object to json and otherway

-axios.get("url", {config obj}).then(res => console.log(res))
.catch(err => {this.state.error:true})
-axios.post("url", data, {config}).then(res => console.log(res));
-axios.delete("url",{config obj}).then(res => console.log(res);


-interceptors with axios funtion that will be executed globaly for 
evry request that we made
best place to hadle intercepros is in index.js file

-request interceptor
axios.interceptors.request.use(config => {
    console.log(config);
   will be executed for evry request we have
   good place for setting up request header like token
}, err => {
    will executed if request is not send like no internet
}
)

-response intercdeptor
axios.interceptors.response.use();/ same as request
-config will execute if response is success
-err will execute if resonse has error status code

-set up axios configuration
in index,js

axios.defaults.baseURL = "url"
axios.defaults.headers.common['authorization'] = "TOKEN"
axios.defaults.headers.post["Contetnt-type"] = "Aplication/json"


-making instance from axios (if you whant to have multiple configurations)
- instance will take defaults config of axios but override whit the local settings

-new js file
import axios from axios

const ax = axios.create({
   baseURL : "url"
})

ax.defaults.headers.... = 'Something'

export default ax

if use interceptors you need to remove them in compontntWillUnmount
first add the as class properites this.reqInterceptor = axios.inter.....
axios.iterceptors.reqest.eject(this.reqInterceptor.eject(this.reqInterceptor31)

31.Redux 
good place to create store is index.js

A.Connect redux to react
- in index.js
import { Provider } from 'react-redux'
import { CreateStore } from 'redux';

from reducers create store

const store = createStore(reducer);

wrap <App/> whit Provider and add to him attribute store={store}

B. Reducer is a function that have two parameters (oldState, action)
and returns the new state but not to mutate the old one need to make new reference


C.connect component with store
-import { connect } from 'react-redux'

export default connect(mapStateToProps, mapDispatchToProps)(Component)

-mapStateToProps has one parameter the state and return object that contains the 
props that component will recive

-mapDipatchToProps has one parameter the dispatch function and return object with 
properties that hold reference to action with type;


D. when to use redux

-Local ui State / show/hide backdrop of modal / can use redux but not recomended
-Persistent State/ all users, all posts/  store on server use redux
-Client state / isAutenticate , filter by user/ use redux

